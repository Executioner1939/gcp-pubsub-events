name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-11-jdk
        echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
    
    - name: Install Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
    
    - name: Install PubSub emulator
      run: |
        gcloud components install beta pubsub-emulator --quiet
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-xdist flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Start PubSub emulator
      run: |
        # Start emulator in background
        nohup gcloud beta emulators pubsub start --host-port=0.0.0.0:8085 > emulator.log 2>&1 &
        EMULATOR_PID=$!
        echo "EMULATOR_PID=$EMULATOR_PID" >> $GITHUB_ENV
        echo "PUBSUB_EMULATOR_HOST=localhost:8085" >> $GITHUB_ENV
        
        # Wait for emulator to be ready
        echo "Waiting for emulator to start..."
        timeout=60
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:8085 >/dev/null 2>&1; then
            echo "‚úÖ Emulator is ready!"
            break
          fi
          echo "‚è≥ Waiting... ($timeout seconds left)"
          sleep 2
          timeout=$((timeout-2))
        done
        
        if [ $timeout -le 0 ]; then
          echo "‚ùå Emulator failed to start!"
          echo "Emulator logs:"
          cat emulator.log || echo "No emulator log found"
          exit 1
        fi
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short
      if: always()
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short --timeout=60
      env:
        PUBSUB_EMULATOR_HOST: localhost:8085
    
    - name: Run end-to-end tests
      run: |
        pytest tests/e2e/ -v --tb=short --timeout=120
      env:
        PUBSUB_EMULATOR_HOST: localhost:8085
    
    - name: Generate test report
      run: |
        pytest --cov --cov-branch --cov-report=xml --junitxml=test-results.xml
      env:
        PUBSUB_EMULATOR_HOST: localhost:8085
      if: always()
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml
      if: always()
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: tests
        name: python-${{ matrix.python-version }}
      if: matrix.python-version == '3.11' # Only upload once
    
    - name: Stop PubSub emulator
      run: |
        echo "üßπ Stopping PubSub emulator..."
        if [ ! -z "$EMULATOR_PID" ]; then
          echo "Killing emulator PID: $EMULATOR_PID"
          kill $EMULATOR_PID || true
          sleep 2
        fi
        # Kill any remaining emulator processes
        pkill -f "pubsub-emulator" || true
        pkill -f "cloud-pubsub-emulator" || true
        echo "‚úÖ Cleanup complete"
      if: always()

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions-${{ matrix.python-version }}
        path: dist/
        retention-days: 30

  publish:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload to GitHub Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gcp-pubsub-events-package
        path: dist/
        retention-days: 90
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Release of gcp-pubsub-events ${{ github.ref_name }}
          
          ## Installation
          Download the wheel or tar.gz file from the assets below and install with:
          ```bash
          pip install gcp-pubsub-events-*.whl
          ```
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: gcp-pubsub-events-dist
        asset_content_type: application/zip